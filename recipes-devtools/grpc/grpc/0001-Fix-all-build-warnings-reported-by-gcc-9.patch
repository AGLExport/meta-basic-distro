From 25017ee694c835e9a2f1158aab5737c28e92a7e6 Mon Sep 17 00:00:00 2001
From: Alok Priyadarshi <alokpr@gmail.com>
Date: Fri, 15 Apr 2022 14:21:03 -0700
Subject: [PATCH] Fix all build warnings reported by gcc-9.

Fixes grpc/grpc#29417
---
 include/grpc/impl/codegen/port_platform.h        |  8 ++++++++
 .../binder/transport/binder_transport.cc         | 16 ++++++++--------
 .../binder/wire_format/wire_reader_impl.cc       |  2 +-
 src/core/lib/http/httpcli_security_connector.cc  |  3 ++-
 src/core/lib/promise/activity.h                  |  4 +++-
 src/core/lib/promise/loop.h                      |  2 +-
 src/core/lib/resource_quota/memory_quota.cc      |  3 ++-
 src/core/lib/transport/metadata_batch.h          |  1 +
 8 files changed, 26 insertions(+), 13 deletions(-)

diff --git a/include/grpc/impl/codegen/port_platform.h b/include/grpc/impl/codegen/port_platform.h
index 3227f5115b..fd0a4446d5 100644
--- a/include/grpc/impl/codegen/port_platform.h
+++ b/include/grpc/impl/codegen/port_platform.h
@@ -611,6 +611,14 @@ typedef unsigned __int64 uint64_t;
 #endif
 #endif /* GPR_NO_UNIQUE_ADDRESS */
 
+#ifndef GPR_MAYBE_UNUSED
+#if GPR_HAS_CPP_ATTRIBUTE(maybe_unused)
+#define GPR_MAYBE_UNUSED [[maybe_unused]]
+#else
+#define GPR_MAYBE_UNUSED
+#endif
+#endif /* GPR_MAYBE_UNUSED */
+
 #ifndef GRPC_DEPRECATED
 #if GPR_HAS_CPP_ATTRIBUTE(deprecated)
 #define GRPC_DEPRECATED(reason) [[deprecated(reason)]]
diff --git a/src/core/ext/transport/binder/transport/binder_transport.cc b/src/core/ext/transport/binder/transport/binder_transport.cc
index fc5e553a8f..c2a2294e0c 100644
--- a/src/core/ext/transport/binder/transport/binder_transport.cc
+++ b/src/core/ext/transport/binder/transport/binder_transport.cc
@@ -132,7 +132,7 @@ static void set_pollset(grpc_transport* gt, grpc_stream* gs, grpc_pollset* gp) {
 }
 
 static void set_pollset_set(grpc_transport*, grpc_stream*, grpc_pollset_set*) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
 }
 
 static void AssignMetadata(grpc_metadata_batch* mb,
@@ -649,7 +649,7 @@ static void perform_transport_op_locked(void* transport_op,
 }
 
 static void perform_transport_op(grpc_transport* gt, grpc_transport_op* op) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
   grpc_binder_transport* gbt = reinterpret_cast<grpc_binder_transport*>(gt);
   op->handler_private.extra_arg = gbt;
   GRPC_BINDER_REF_TRANSPORT(gbt, "perform_transport_op");
@@ -671,7 +671,7 @@ static void destroy_stream_locked(void* sp, grpc_error_handle /*error*/) {
 
 static void destroy_stream(grpc_transport* /*gt*/, grpc_stream* gs,
                            grpc_closure* then_schedule_closure) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
   grpc_binder_stream* gbs = reinterpret_cast<grpc_binder_stream*>(gs);
   gbs->destroy_stream_then_closure = then_schedule_closure;
   gbs->t->combiner->Run(GRPC_CLOSURE_INIT(&gbs->destroy_stream,
@@ -690,7 +690,7 @@ static void destroy_transport_locked(void* gt, grpc_error_handle /*error*/) {
 }
 
 static void destroy_transport(grpc_transport* gt) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
   grpc_binder_transport* gbt = reinterpret_cast<grpc_binder_transport*>(gt);
   gbt->combiner->Run(
       GRPC_CLOSURE_CREATE(destroy_transport_locked, gbt, nullptr),
@@ -698,7 +698,7 @@ static void destroy_transport(grpc_transport* gt) {
 }
 
 static grpc_endpoint* get_endpoint(grpc_transport*) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
   return nullptr;
 }
 
@@ -734,7 +734,7 @@ grpc_binder_transport::grpc_binder_transport(
           is_client ? "binder_transport_client" : "binder_transport_server",
           GRPC_CHANNEL_READY),
       refs(1, nullptr) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
   base.vtable = get_vtable();
   GRPC_CLOSURE_INIT(&accept_stream_closure, accept_stream_locked, this,
                     nullptr);
@@ -764,7 +764,7 @@ grpc_transport* grpc_create_binder_transport_client(
     std::unique_ptr<grpc_binder::Binder> endpoint_binder,
     std::shared_ptr<grpc::experimental::binder::SecurityPolicy>
         security_policy) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
 
   GPR_ASSERT(endpoint_binder != nullptr);
   GPR_ASSERT(security_policy != nullptr);
@@ -779,7 +779,7 @@ grpc_transport* grpc_create_binder_transport_server(
     std::unique_ptr<grpc_binder::Binder> client_binder,
     std::shared_ptr<grpc::experimental::binder::SecurityPolicy>
         security_policy) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
 
   GPR_ASSERT(client_binder != nullptr);
   GPR_ASSERT(security_policy != nullptr);
diff --git a/src/core/ext/transport/binder/wire_format/wire_reader_impl.cc b/src/core/ext/transport/binder/wire_format/wire_reader_impl.cc
index fbce41620c..ef66bad706 100644
--- a/src/core/ext/transport/binder/wire_format/wire_reader_impl.cc
+++ b/src/core/ext/transport/binder/wire_format/wire_reader_impl.cc
@@ -151,7 +151,7 @@ std::unique_ptr<Binder> WireReaderImpl::RecvSetupTransport() {
 absl::Status WireReaderImpl::ProcessTransaction(transaction_code_t code,
                                                 ReadableParcel* parcel,
                                                 int uid) {
-  gpr_log(GPR_INFO, __func__);
+  gpr_log(GPR_INFO, "%s", __func__);
   gpr_log(GPR_INFO, "tx code = %u", code);
   if (code >= static_cast<unsigned>(kFirstCallId)) {
     gpr_log(GPR_INFO, "This is probably a Streaming Tx");
diff --git a/src/core/lib/http/httpcli_security_connector.cc b/src/core/lib/http/httpcli_security_connector.cc
index 99273173e7..054a4f5742 100644
--- a/src/core/lib/http/httpcli_security_connector.cc
+++ b/src/core/lib/http/httpcli_security_connector.cc
@@ -100,7 +100,8 @@ class grpc_httpcli_ssl_channel_security_connector final
     if (secure_peer_name_ != nullptr &&
         !tsi_ssl_peer_matches_name(&peer, secure_peer_name_)) {
       error = GRPC_ERROR_CREATE_FROM_CPP_STRING(absl::StrCat(
-          "Peer name ", secure_peer_name_, " is not in peer certificate"));
+          "Peer name ", absl::NullSafeStringView(secure_peer_name_),
+          " is not in peer certificate"));
     }
     ExecCtx::Run(DEBUG_LOCATION, on_peer_checked, error);
     tsi_peer_destruct(&peer);
diff --git a/src/core/lib/promise/activity.h b/src/core/lib/promise/activity.h
index 01aed8b3e2..56de74fd2f 100644
--- a/src/core/lib/promise/activity.h
+++ b/src/core/lib/promise/activity.h
@@ -218,7 +218,9 @@ class ActivityContexts : public ContextHolder<Contexts>... {
 
   class ScopedContext : public Context<ContextTypeFromHeld<Contexts>>... {
    public:
-    explicit ScopedContext(ActivityContexts* contexts)
+    // Use [[maybe_unused]] suffix instead of prefix due to gcc bug present in
+    // in versions < 9.3: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81429
+    explicit ScopedContext(ActivityContexts* contexts GPR_MAYBE_UNUSED)
         : Context<ContextTypeFromHeld<Contexts>>(
               static_cast<ContextHolder<Contexts>*>(contexts)
                   ->GetContext())... {}
diff --git a/src/core/lib/promise/loop.h b/src/core/lib/promise/loop.h
index 3de266727c..db253eabcf 100644
--- a/src/core/lib/promise/loop.h
+++ b/src/core/lib/promise/loop.h
@@ -116,7 +116,7 @@ class Loop {
 
  private:
   GPR_NO_UNIQUE_ADDRESS Factory factory_;
-  GPR_NO_UNIQUE_ADDRESS union { GPR_NO_UNIQUE_ADDRESS PromiseType promise_; };
+  union GPR_NO_UNIQUE_ADDRESS { GPR_NO_UNIQUE_ADDRESS PromiseType promise_; };
 };
 
 }  // namespace promise_detail
diff --git a/src/core/lib/resource_quota/memory_quota.cc b/src/core/lib/resource_quota/memory_quota.cc
index fcbf7dc52b..0537f7e35b 100644
--- a/src/core/lib/resource_quota/memory_quota.cc
+++ b/src/core/lib/resource_quota/memory_quota.cc
@@ -448,7 +448,8 @@ void BasicMemoryQuota::SetSize(size_t new_size) {
 void BasicMemoryQuota::Take(size_t amount) {
   // If there's a request for nothing, then do nothing!
   if (amount == 0) return;
-  GPR_DEBUG_ASSERT(amount <= std::numeric_limits<intptr_t>::max());
+  GPR_DEBUG_ASSERT(amount <=
+                   static_cast<size_t>(std::numeric_limits<intptr_t>::max()));
   // Grab memory from the quota.
   auto prior = free_bytes_.fetch_sub(amount, std::memory_order_acq_rel);
   // If we push into overcommit, awake the reclaimer.
diff --git a/src/core/lib/transport/metadata_batch.h b/src/core/lib/transport/metadata_batch.h
index ccd34bc890..ad08e52f3f 100644
--- a/src/core/lib/transport/metadata_batch.h
+++ b/src/core/lib/transport/metadata_batch.h
@@ -532,6 +532,7 @@ struct GrpcStreamNetworkState {
       case kNotSeenByServer:
         return "not seen by server";
     }
+    GPR_UNREACHABLE_CODE(return "");
   }
 };
 
-- 
2.25.1

